/**
 * https://projecteuler.net/problem=2
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous 
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 *    1, 2, 3, 5, 8, 13, 21, 34, 55, 89...
 *    Note: 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 + 55 + 89 = 231
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * 
 *    Note:  2 + 8 + 34 = 44
 * 
 */
use std::io;

fn sum_even_fibonacci (max: &i32) {
  let mut base: i32 = 1;
  let mut ceil: i32 = 1;
  let mut sum_even: i32 = 0;
  // max is a borrowed reference, it must be dereferenced
  while base <= *max {
    let _base = base;
    let _ceil = ceil;
    if ceil % 2 == 0 {
      sum_even += ceil
    } 
    base = _ceil;
    ceil = _base + _ceil;
    // println!("Sum Even: {}. Base: {}. Ceil: {}.", sum_even, _base, _ceil);
  }
  println!("\nSum of even Fibonacci numbers: {}.\n", sum_even);
}

fn main () {
  println!("\nThis program calculates the sum of all even Fibonacci numbers that have a value less than or equal to the number inputted.");
  println!("\nWhat is the largest number you'd like to include in this calculation?\n");
  let mut input = String::new();
  io::stdin()
    .read_line(&mut input)
    .expect("Failed to read line.");
  // Because I'm defining this variable within main() main now has ownership
  let ceiling: i32 = input.trim().parse::<i32>().unwrap();
  // So ceiling has to be borrowed below
  sum_even_fibonacci(&ceiling)
}